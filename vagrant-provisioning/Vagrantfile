# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV['VAGRANT_NO_PARALLEL'] = 'yes'

Vagrant.configure(2) do |config|
  
  # Kubernetes Master Server
  config.vm.define "kmaster" do |kmaster|
    kmaster.vm.box = "generic/centos8"
    kmaster.vm.hostname = "kmaster.local"
    kmaster.vm.network "private_network", ip: "192.168.10.10"
    kmaster.vm.provider "virtualbox" do |v|
      v.name = "kmaster"
      v.memory = 6144
      v.cpus = 2
      # Prevent VirtualBox from interfering with host audio stack
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end

    kmaster.vm.provision "shell", path: "bootstrap.sh"        
    
    kmaster.vm.provision "shell", path: "bootstrap_kmaster_flannel.sh"
  end

  NodeCount = 2

  # Kubernetes Worker Nodes
  (1..NodeCount).each do |i|
    config.vm.define "kworker#{i}" do |workernode|
      workernode.vm.box = "generic/centos8"
      workernode.vm.hostname = "kworker#{i}.local"
      workernode.vm.network "private_network", ip: "192.168.10.#{i + 10}"
      workernode.vm.provider "virtualbox" do |v|
        v.name = "kworker#{i}"
        v.memory = 1024
        v.cpus = 2
        # Prevent VirtualBox from interfering with host audio stack
        v.customize ["modifyvm", :id, "--audio", "none"]
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      end
      
      workernode.vm.provision "shell", path: "bootstrap.sh"
      workernode.vm.provision "shell", path: "bootstrap_kworker.sh"
	  
	  # ----- Adding trigger - only after last VM is UP ------ #
  	  workernode.trigger.after :up do |trigger|
		trigger.only_on = "kworker2.example.com"
		trigger.info = "Running only after last machine is up!"
		config.vm.define "kmaster" do |kmaster|
		  run_remote  "bash /vagrant/bootstrap_kmaster_post.sh"
			kmaster.vm.provision "shell", path: "bootstrap_kmaster_post.sh"
		end
	  end	  
    end
  end
  
    # NFS Server
  config.vm.define "file-server" do |fileserver|
    fileserver.vm.box = "generic/centos8"
    fileserver.vm.hostname = "file-server.local"
    fileserver.vm.network "private_network", ip: "192.168.10.#{NodeCount + 11}"
    fileserver.vm.provider "virtualbox" do |v|
      v.name = "file-server"
      v.memory = 1024
      v.cpus = 2
      # Prevent VirtualBox from interfering with host audio stack
      v.customize ["modifyvm", :id, "--audio", "none"]
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
            
    fileserver.vm.provision "shell", path: "bootstrap_file_server.sh"
  end    
end
